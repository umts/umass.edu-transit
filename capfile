require 'capistrano/version'
require 'bundler'

# Check for missing gems. Practically the same as `bundle check`
begin
  definition = Bundler.definition
  not_installed = definition.missing_specs
rescue Bundler::GemNotFound, Bundler::VersionConflict
  $stderr.puts "Bundler can't satisfy your Gemfile's dependencies."
  $stderr.puts "Install missing gems with `bundle install`."
  exit 1
end

load 'deploy' if respond_to?(:namespace) # cap2 differentiator

set :application, "transit"
set :repository,  "git://github.com/umts/umass.edu-transit.git"
set :scm, "git"

set :oit_location, "/transit"
set :deploy_to, "/cwis/http/htdocs#{oit_location}"
set :user, "transit"
set :use_sudo, false
set :shared_children, []
set :normalize_asset_timestamps, false

set :deploy_via, :copy
set :copy_cache, true
set :build_script, "stasis"
set :copy_remote_dir, deploy_to

role :app, "webadmin.oit.umass.edu"
role :web, "webadmin.oit.umass.edu"

after :deploy, "index:relink"
after "deploy:setup", "deploy:htaccess"


namespace :index do
  desc "Sets the index page of our public webpage to the one with a news feed"
  task :news do
    set :index_page, "news.html"
    link
  end

  desc "Sets the index page of our public webpage to the one with a slideshow"
  task :slideshow do
    set :index_page, "slideshow.html"
    link
  end

  desc <<-DESC
    Links up index.html to another file on the site.  This over-writes the \
    default index.html that's in the repository.  Probably you don't want to \
    call this one directly, but you can.  More likely, this will be called \
    by index:slideshow or index:news
  DESC
  task :link do
    begin
      run "ln -f -s #{current_path}/public/#{index_page} #{current_path}/public/index.html &&
           echo \"#{index_page}\" > #{deploy_to}/MODE"
    rescue NameError
      puts "index_page is not defined.  You probably want to run 'cap index:slideshow'
            or 'cap index:news' instead. If you really want to link to some other
            page, sprecify the value like so:
            > cap index:link -s 'index_page=some_other_page.html'".gsub(/  +/, '').gsub(/>/, "\t")
    end
  end

  desc <<-DESC
    Re-links the index.html file back to whatever location we had previously \
    used.  This is called post-deploy, and you probably won't need to call \
    it directly.
  DESC
  task :relink do
    run "ln -f -s #{current_path}/public/`cat #{deploy_to}/MODE` #{current_path}/public/index.html"
  end
end

namespace :deploy do
  desc <<-DESC
    This creates a .htaccess file in the deploy directory that redirects
    requests to the deploy directory (ie /transit) to the current release
    directory (ie /transit/current) behind-the-scenes.  This wouldn't be
    necisary if we had controll over the server.
  DESC
  task :htaccess  do
    rewrite_file = <<-EOF
      RewriteEngine On
      RewriteRule ^/cwis.* #{oit_location}/ [R,L]
      RewriteRule (.*) #{oit_location}/current/public/$1
    EOF
    put rewrite_file, "#{deploy_to}/.htaccess"
  end

  desc <<-DESC
    Deploys code for the first time.  It is the same as a normal deploy, but
    also sets up the index page to point to slideshow
  DESC
  task :cold do
    update
    index.slideshow
  end
end

# vi: set filetype=ruby :
